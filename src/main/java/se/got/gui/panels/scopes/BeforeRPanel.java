/**
 * Copyright (C) 2011-2014 Swinburne University of Technology and University of Gotheborg
 *
 * These file have been developed as a part of the co4robots project.
 * It is a tool
 *
 * These files are based on PSPWizard which was developed at Faculty of Science, Engineering and
 * Technology at Swinburne University of Technology, Australia.
 * The patterns, structured English grammar and mappings are due to
 * Marco Autili, Universita` dell'Aquila
 * Lars Grunske, University of Stuttgart
 * Markus Lumpe, Swinburne University of Technology
 * Patrizio Pelliccione, University of Gothenburg
 * Antony Tang, Swinburne University of Technology
 *
 * Details about the PSP framework can found in
 * "Aligning Qualitative, Real-Time, and Probabilistic
 * Property Specification Patterns Using a Structured
 * English Grammar"
 *
 *
 *
 * PSPWizard is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2, or (at your option)
 * any later version.
 *
 * PSPWizard is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PSPWizard; see the file COPYING.  If not, write to
 * the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
 */
package se.got.gui.panels.scopes;

import se.got.engine.PSPController;
import se.got.sel.Event;
import se.got.sel.scopes.BeforeR;
import se.got.sel.scopes.Scope;

public class BeforeRPanel extends javax.swing.JPanel implements ScopePanelFeatures
{
    private PSPController fPSPController;
    private Scope fSelectedScope;

    public Scope getSelectedScope()
    {
        return fSelectedScope;
    }

    public void setSelectedScope( Scope aSelectedScope )
    {
        fSelectedScope = aSelectedScope;
        fScopeA.setSelectedItem( fSelectedScope.getR() );
    }

    public BeforeRPanel() 
    {
        initComponents();
        
        fSelectedScope = new BeforeR();
    }

    public void clearSelection() 
    {
        setSelectedScope( new BeforeR() );
    }

    public void setController( PSPController aPSPController )
    {
        fPSPController = aPSPController;
        
        fScopeA.setController( fPSPController );
    }

    public void updateEvents()
    {
        fScopeA.updateEvents();
    }

    private void updateScope()
    {
        fSelectedScope.setR( (Event)fScopeA.getSelectedItem() );
            
        if ( fPSPController != null )
            fPSPController.updateScope();
    }
    
    private boolean isEventSelectionPossible( Event aEvent )
    {
        if ( fPSPController != null )
            return fPSPController.isScopeEventSelectionPossible( aEvent );
        
        return true;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        fScopeA = new se.got.gui.util.EventComboBox();

        setMaximumSize(new java.awt.Dimension(500, 57));
        setMinimumSize(new java.awt.Dimension(500, 57));
        setPreferredSize(new java.awt.Dimension(500, 57));

        jLabel2.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jLabel2.setText("Before");

        fScopeA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fScopeAActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(fScopeA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(252, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fScopeA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addContainerGap(15, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void fScopeAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fScopeAActionPerformed
        // check that selected Event is not used in pattern
        Event lEvent = (Event)fScopeA.getSelectedItem();
        
        if ( lEvent != null )
        {
            if ( isEventSelectionPossible( lEvent ) )
            {
                fScopeA.acceptSelection();
                updateScope();
            }
            else
                fScopeA.revertSelection();
        }
    }//GEN-LAST:event_fScopeAActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private se.got.gui.util.EventComboBox fScopeA;
    private javax.swing.JLabel jLabel2;
    // End of variables declaration//GEN-END:variables
}
